name: Load Test with k6 (via ECS Fargate)

on:
  workflow_dispatch:
    inputs:
      script_name:
        description: "Nome do script"
        required: true
        default: "load-test.js"
      rps_target_1:
        description: "RPS RAMP_UP"
        default: "1"
      duration_target_1:
        description: "Duração RAMP_UP"
        default: "3s"
      rps_target_2:
        description: "RPS TARGET"
        default: "3"
      duration_target_2:
        description: "Duração TARGET"
        default: "10s"
      rps_target_3:
        description: "RPS RAMP_DOWN"
        default: "1"
      duration_target_3:
        description: "Duração RAMP_DOWN"
        default: "3s"

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: k6-loadtest
  ECR_REGISTRY: 124355673305.dkr.ecr.us-east-1.amazonaws.com
  IMAGE_TAG: latest

jobs:
  k6-loadtest:
    name: Build + Push + Run Load Test
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repositório
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login no ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Garantir que o repositório ECR exista
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" --region "$AWS_REGION" > /dev/null 2>&1 || \
          aws ecr create-repository \
            --repository-name "$ECR_REPOSITORY" \
            --region "$AWS_REGION" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256

      - name: Build e Push da imagem Docker customizada para o ECR
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Baixar variáveis da infra do S3 (.env)
        run: |
          aws s3 cp s3://k6-loadtest-config/k6_infra_values.env k6_infra_values.env
          cat k6_infra_values.env >> $GITHUB_ENV

      - name: Tornar script executável
        run: chmod +x run-task.sh

      - name: Disparar Task no ECS com k6
        run: |
          ./run-task.sh \
            "${{ github.event.inputs.rps_target_1 }}" \
            "${{ github.event.inputs.duration_target_1 }}" \
            "${{ github.event.inputs.rps_target_2 }}" \
            "${{ github.event.inputs.duration_target_2 }}" \
            "${{ github.event.inputs.rps_target_3 }}" \
            "${{ github.event.inputs.duration_target_3 }}"

      - name: Aguardar finalização e baixar HTML do S3
        run: |
          echo "Aguardando 90 segundos para conclusão da task..."
          sleep 90
          aws s3 cp s3://k6-loadtest-report/index_load_test.html index_load_test.html

      - name: Upload do relatório como artifact
        uses: actions/upload-artifact@v4
        with:
          name: k6-loadtest-report
          path: index_load_test.html
          retention-days: 7
